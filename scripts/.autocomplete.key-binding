#!/bin/zsh
zmodload zsh/complist
zmodload -F zsh/parameter p:funcstack p:functions
zmodload -F zsh/terminfo p:terminfo

.autocomplete.key-binding.precmd() {
  emulate -L zsh
  setopt $_autocomplete__func_opts[@]

  # Need to bind completion widgets here to stop Syntax Highlighting from complaining.

  local -a ignored=()
  builtin zstyle -g ignored ':autocomplete:shift-tab:*' insert-unambiguous ||
      builtin zstyle ':autocomplete:shift-tab:*' insert-unambiguous yes

  local tab_style=
  if ! builtin zstyle -s :autocomplete:tab: widget-style tab_style; then
    tab_style='complete-word'
    builtin zstyle ':autocomplete:tab:*' widget-style $tab_style
  fi

  if builtin zstyle -t :autocomplete:tab: fzf-completion &&
      [[ -v functions[fzf-completion] ]]; then
    typeset -gH fzf_default_completion=$tab_style
    functions[.autocomplete.fzf-completion]=$functions[fzf-completion]
    fzf-completion() {
      zle() {
        builtin zle "$@" ${${(M)funcstack[2]:#.autocomplete.fzf-completion}:+-w}
      }
      {
        .autocomplete.fzf-completion "$@"
      } always {
        [[ -v functions[zle] ]] &&
            unfunction zle
      }
    }
  else
    builtin bindkey -M emacs '\t' $tab_style
    builtin bindkey -M viins '\t' $tab_style
  fi

  if [[ $tab_style == *menu-* ]]; then
    builtin bindkey -M menuselect '\t' menu-complete
  else
    builtin bindkey -M menuselect '\t' accept-line
  fi

  if [[ -v terminfo[kcbt] && -n $terminfo[kcbt] ]]; then
    local backtab_style=
    if ! builtin zstyle -s :autocomplete:shift-tab: widget-style backtab_style; then
      backtab_style=${tab_style:/menu-complete/reverse-menu-complete}
      builtin zstyle ':autocomplete:shift-tab:*' widget-style $backtab_style
    fi

    builtin bindkey -M emacs $terminfo[kcbt] $backtab_style
    builtin bindkey -M viins $terminfo[kcbt] $backtab_style
    if [[ $backtab_style == *menu-* ]]; then
      builtin bindkey -M menuselect $terminfo[kcbt] reverse-menu-complete
    else
      builtin bindkey -M menuselect -s $terminfo[kcbt] "\t^_$terminfo[kcbt]"
    fi
  fi

  .autocomplete.key-binding.bind emacs history-search-backward $_autocomplete__key_alt_up[@] $terminfo[kpp]
  .autocomplete.key-binding.bind vicmd history-search-backward $_autocomplete__key_up[@]
  .autocomplete.key-binding.bind viins history-search-backward $terminfo[kpp]

  .autocomplete.key-binding.bind emacs menu-select $_autocomplete__key_alt_down[@] $terminfo[knp]
  .autocomplete.key-binding.bind vicmd menu-select $_autocomplete__key_down[@]
  .autocomplete.key-binding.bind viins menu-select $terminfo[knp]

  unset -m '_autocomplete__key_*'
  unfunction .autocomplete.key-binding.{{,re,un}bind,bound}
}

.autocomplete.key-binding.bind() {
  local -P map=$1 widget=$2
  shift 2
  builtin bindkey -M "$map" "${@:^^widget}"
}

.autocomplete.key-binding.bound() {
  [[ $( builtin bindkey -M "$1" "$2" ) == \"$2\"" $3" ]]
}

.autocomplete.key-binding.rebind() {
  .autocomplete.key-binding.bound "$1" "$2" "$3" &&
      builtin bindkey -M "$1" "$2" "$4"
}

.autocomplete.key-binding.unbind() {
  .autocomplete.key-binding.bound "$1" "$2" "$3" &&
      builtin bindkey -M "$1" -r "$2"
}

local -Pa prefix=( '\e'{\[,O} )
typeset -ga _autocomplete__key_up=( ${^prefix}A )
typeset -ga _autocomplete__key_down=( ${^prefix}B )
typeset -ga _autocomplete__key_alt_up=( '\e'$^_autocomplete__key_up '\e[1;3A' )
typeset -ga _autocomplete__key_alt_down=( '\e'$^_autocomplete__key_down '\e[1;3B' )

.autocomplete.key-binding.bind emacs up-line-or-search $_autocomplete__key_up[@]
.autocomplete.key-binding.bind viins up-line-or-search $_autocomplete__key_up[@]

.autocomplete.key-binding.bind emacs down-line-or-select $_autocomplete__key_down[@]
.autocomplete.key-binding.bind viins down-line-or-select $_autocomplete__key_down[@]
.autocomplete.key-binding.bind vicmd down-line-or-select $_autocomplete__key_down[@]

.autocomplete.key-binding.rebind emacs '^D' delete-char-or-list delete-char

.autocomplete.key-binding.unbind emacs '^X*' expand-word

.autocomplete.key-binding.unbind emacs '\e^D' list-choices
.autocomplete.key-binding.unbind vicmd   '^D' list-choices
.autocomplete.key-binding.unbind vicmd    '=' list-choices
.autocomplete.key-binding.unbind viins   '^D' list-choices

.autocomplete.key-binding.bind menuselect vi-backward-blank-word $_autocomplete__key_alt_up[@]
.autocomplete.key-binding.bind menuselect  vi-forward-blank-word $_autocomplete__key_alt_down[@]
builtin bindkey -M menuselect \
    '\r'  .accept-line \
    '^@'   accept-and-hold \
    "$terminfo[kpp]" backward-word \
    "$terminfo[knp]" forward-word \
    '^_' .undo
