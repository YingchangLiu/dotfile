#autoload

_autocomplete.history_lines() {
  private tag=history-lines
  _tags $tag
  _tags ||
      return 1
  _requested $tag ||
      return 1

  private -A events=()
  private -i min_lines= max_lines=
  builtin zstyle -s ":autocomplete:${curcontext}:" list-lines min_lines ||
      min_lines=16
  (( max_lines = min( min_lines, HISTNO - 1, LINES - BUFFERLINES ) ))

  if [[ -z $BUFFER ]]; then
    if [[ $curcontext == *-forward:* ]]; then
      private -i inc=1 histno=1
    else
      private -i inc=-1 histno=$(( HISTNO - 1 ))
    fi
    if [[ -o histfindnodups ]]; then
      while (( $#events[@] < max_lines && 0 < histno && histno < HISTNO )); do
        [[ -v history[$histno] && ! -v events[$history[$histno]] ]] &&
            events[$history[$histno]]=$histno
        (( histno += inc ))
      done
      events=( "${(@Oa)${(@kv)events}}" )
    else
      while (( $#events[@] < max_lines && 0 < histno && histno < HISTNO )); do
        [[ -v history[$histno] ]] &&
            events[$histno]="$history[$histno]"
        (( histno += inc ))
      done
    fi
  else
    private word=$IPREFIX$PREFIX$SUFFIX$ISUFFIX
    private -aU err=( '(#ia'{0..$(( $#words[CURRENT] / 3 ))}')' )
    if [[ $WIDGET == (|*-)search(|-*) ]]; then
      private -aU queries=( \*$^err${(j:*:)${(0)words[CURRENT]}}\* )
    else
      private lbuffer="${(j.[[:blank:]]##.)${(@b)words[1,CURRENT-1]}}"
      private rbuffer="${(j.[[:blank:]]##.)${(@b)words[CURRENT+1,-1]}}"
      [[ -n $lbuffer ]] &&
          lbuffer="${lbuffer}[[:blank:]]##"
      [[ -n $rbuffer ]] &&
          rbuffer="[[:blank:]]##${rbuffer}"
      lbuffer="$lbuffer${(b)QIPREFIX}"
      rbuffer="${(b)QISUFFIX}$rbuffer"
      private -aU queries=( $lbuffer\*\($^err${words[CURRENT]}\)\*$rbuffer )
    fi
    if [[ -o histfindnodups ]]; then
      private -a numbers=()
      private q=
      for q in $queries[@]; do
        numbers=( "${(@k)history[(R)$~q]}" )
        (( $#numbers[@] )) &&
            break
      done
      private -a lines=( "${(@v)history[(I)(${(~j:|:)numbers})]}" )
      if [[ $curcontext != *-forward:* ]]; then
        numbers=( "${(@Oa)numbers}" )
        lines=( "${(@Oa)lines}" )
      fi
      events=( "${(@)lines:^numbers}" )
      events=( "${(@Oa)${(@kv)events}}" )
    else
      private q=
      for q in $queries[@]; do
        events=( "${(@kv)history[(R)$~q]}" )
        (( $#events[@] )) &&
            break
      done
    fi
  fi

  (( $#events[@] )) ||
      return

  local -a displays=()
  printf -v displays "%s:%s" "${(@kv)events}"
  displays=( "$displays[@]" )

  private -i diff=$(( $#displays[@] - max_lines ))
  private suf=
if [[ $WIDGET == (|*-)search(|-*) ]]; then
    displays=( ${(@n)displays} )
    (( diff > 0 )) &&
        shift "$diff" displays
    suf=';'
  else
    if [[ $curcontext == *-forward:* ]]; then
        displays=( ${(@n)displays} )
    else
        displays=( ${(@On)displays} )
    fi
    (( diff > 0 )) &&
        shift -p "$diff" displays
    suf=' '
  fi

  local -a matches=( "${displays[@]##[[:blank:]]#<->:}" )
  [[ $WIDGET != (|*-)search(|-*) ]] &&
      matches=( "${(@)${(@)matches[@]##$~lbuffer}%%$~rbuffer}" )

  private -a match=() mbegin=() mend=()
  displays=(
      "${(@r:COLUMNS-1:)displays[@]/%(#b)(<->):(*)/${(l:$#HISTNO:)match[1]} ${(V)${(Z+C+)match[2]}}}"
  )

  local -a expl=()
  local _comp_no_ignore=1
  _description -2V "$tag" expl 'history line'
  builtin compadd "$expl[@]" -qS "$suf" -QU -ld displays -a matches
}
# functions -T _autocomplete.history_lines

_autocomplete.history_lines "$@"
